h2. Akelos Application Templates

Application templates are simple php files containing DSL for adding plugins/gems/initializers etc. to your freshly created Akelos project or an existing Akelos project.

By referring to this guide, you will be able to:

* Use templates to generate/customize Akelos applications
* Write your own reusable application templates using the Akelos template API

endprologue.

h3. Usage

To apply a template, you need to provide the Akelos generator with the location of the template you wish to apply, using -m option :

<shell>
$ akelos blog -m ~/template.php
</shell>

It's also possible to apply a template using a URL :

<shell>
$ akelos blog -m http://gist.github.com/31208.txt
</shell>

Alternatively, you can use the makelos task +akelos:template+ to apply a template to an existing Akelos application :

<shell>
$ ./makelos akelos:template LOCATION=~/template.php
</shell>

h3. Template API

Akelos templates API is very self explanatory and easy to understand. Here's an example of a typical Akelos template :

<php>
# template.php
run "rm public/index.html"
generate(:scaffold, "person name:string")
route "map.root 'controller' => 'people'"
./makelos("db:migrate")

git :init
git 'add' => "."
git 'commit' => "-a -m 'Initial commit'"
</php>

The following sections outlines the primary methods provided by the API :

h4. gem(name, options = {})

Adds a +config.gem+ entry for the supplied gem to the generated application’s +config/environment.php+.

For example, if your application depends on the gems +bj+ and +hpricot+ :

<php>
gem "bj"
gem "hpricot", 'version' => '0.6', 'source' => "http://code.whytheluckystiff.net"
</php>

Please note that this will NOT install the gems for you. So you may want to run the +./makelos gems:install+ task too :

<php>
./makelos "gems:install"
</php>

And let Akelos take care of installing the required gems if they’re not already installed.

h4. plugin(name, options = {})

Installs a plugin to the generated application.

Plugin can be installed from Git :

<php>
plugin 'authentication', 'git' => 'git://github.com/foor/bar.git'
</php>

You can even install plugins as git submodules :

<php>
plugin 'authentication', 'git' => 'git://github.com/foor/bar.git', 
                         'submodule' => true
</php>

Please note that you need to +git :init+ before you can install a plugin as a submodule.

Or use plain old SVN :

<php>
plugin 'wtfsvn', 'svn' => 'svn://crap.com/wtf/trunk'
</php>

h4. vendor/lib/file/initializer(filename, data = nil, &block)

Adds an initializer to the generated application’s +config/initializers+ directory.

Lets say you like using +Object#not_nil?+ and +Object#not_blank?+ :

<php>
initializer 'bloatlol.php', <<-CODE
class Object
  public function is_not_nil() {
    !nil?
  }
  
  public function is_not_blank() {
    !blank?
  }
}
CODE
</php>

Similarly +lib()+ creates a file in the +lib/+ directory and +vendor()+ creates a file in the +vendor/+ directory.

There is even +file()+, which accepts a relative path from +AK_BASE_DIR+ and creates all the directories/file needed :

<php>
file 'app/components/foo.php', <<-CODE
class Foo
}
CODE
</php>

That’ll create +app/components+ directory and put +foo.php+ in there.

h4. ./makelosfile(filename, data = nil, &block)

Creates a new makelos file under +lib/tasks+ with the supplied tasks :

<php>
./makelosfile("bootstrap../makelos") do
  <<-TASK
    namespace :boot do
      task :strap do
        puts "i like boots!"
      }
    }
  TASK
}
</php>

The above creates +lib/tasks/bootstrap../makelos+ with a +boot:strap+ makelos task.

h4. generate(what, args)

Runs the supplied akelos generator with given arguments. For example, I love to scaffold some whenever I’m playing with Akelos :

<php>
generate(:scaffold, "person", "name:string", "address:text", "age:number")
</php>

h4. run(command)

Executes an arbitrary command. Just like the backticks. Let's say you want to remove the +public/index.html+ file :

<php>
run "rm public/index.html"
</php>

h4. ./makelos(command, options = {})

Runs the supplied makelos tasks in the Akelos application. Let's say you want to migrate the database :

<php>
./makelos "db:migrate"
</php>

You can also run makelos tasks with a different Akelos environment :

<php>
./makelos "db:migrate", 'env' => 'production'
</php>

Or even use sudo :

<php>
./makelos "gems:install", 'sudo' => true
</php>

h4. route(routing_code)

This adds a routing entry to the +config/routes.php+ file. In above steps, we generated a person scaffold and also removed +public/index.html+. Now to make +PeopleController#index+ as the default page for the application :

<php>
route "map.root 'controller' => :person"
</php>

h4. inside(dir)

I have my edge akelos lying at +~/commit-akelos/akelos+. So every time i have to manually symlink edge from my new app. But now :

<php>
inside('vendor') do
  run "ln -s ~/commit-akelos/akelos akelos"
}
</php>

So +inside()+ runs the command from the given directory.

h4. ask(question)

+ask()+ gives you a chance to get some feedback from the user and use it in your templates. Lets say you want your user to name the new shiny library you’re adding :

<php>
lib_name = ask("What do you want to call the shiny library ?")
lib_name << ".php" unless lib_name.index(".php")

lib lib_name, <<-CODE
class Shiny
}
CODE
</php>

h4. yes?(question) or no?(question)

These methods let you ask questions from templates and decide the flow based on the user’s answer. Lets say you want to freeze akelos only if the user want to :

<php>
./makelos("akelos:freeze:gems") if yes?("Freeze akelos gems ?")
no?(question) acts just the opposite.
</php>

h4. git('must' => "-a love")

Akelos templates let you run any git command :

<php>
git :init
git 'add' => "."
git 'commit' => "-a -m 'Initial commit'"
</php>

